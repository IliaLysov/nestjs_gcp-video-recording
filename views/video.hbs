<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <meta name="robots" content="noindex, nofollow">
  <title>Video Recorder</title>
  <style>
    html {
      height: 100%;
    }
    body {
      height: 100%;
      margin: 0px;
      padding: 0px;
      background: white;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center;

    }
    video {
      display: block; max-height: 100%; max-width: 100%; margin: auto;
    }

    button {
      all: unset;
      position: relative;
      height: 60px;
      width: 60px;
      background-color: #7D8CA3;
      border-radius: 50%;
      margin-bottom: 30px;
    }

    button::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      height: 80px;
      width: 80px;
      border-radius: 50%;
      border: #7D8CA3 4px solid;
    }

    .stop {
      height: 40px;
      width: 40px;
      background-color: red !important;
      border-radius: 10% !important; 
    }

    .stop::after {
      border: red 4px solid !important;
    }

  </style>
</head>
<body>

  <div class="data"></div>
  <video muted></video>
  <button type="button" onClick="start()"></button>

  <script>
    const videoUploadUrl = "{{ videoUploadUrl }}"
    const timeDistanceSec = 3
    const video = document.querySelector('video')
    const button = document.querySelector('button')
    const data = document.getElementsByClassName('data')[0]
    data.innerHTML = 0

    let isRecording = false
    let media

    const record = async () => {
      try {
        let stream = await navigator.mediaDevices.getUserMedia({video: {facingMode: 'environment'}, audio: true})
        video.srcObject = stream
        video.play()

        let partIndex = 1

        media = new MediaRecorder(stream)
        media.ondataavailable = (obj) => {
          data.innerHTML += 1
          const form = new FormData()
          form.append('file', obj.data, `part-${partIndex}.webm`)

          fetch(videoUploadUrl, {
            method: "POST",
            body: form // Blob
         }).then(async (res) => {
          const text = await res.text()
          data.innerHTML += text
         })

         partIndex++
        }
        media.start(timeDistanceSec * 1000)
      } catch (e) {
        alert(e)
      }
    }

    const start = () => {
      if (!isRecording) {
        record()
        button.classList.add('stop')
      } else {
        video.pause()
        media.stop()
        video.srcObject.getTracks().forEach(track => track.stop())
        video.srcObject = null
        button.classList.remove('stop')
      }
      isRecording = !isRecording
    }
  </script>

</body>
</html>