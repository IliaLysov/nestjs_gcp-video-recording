<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
  <meta name="robots" content="noindex, nofollow">
  <title>Video Recorder</title>
  <style>
    html {
      height: 100%;
    }
    body {
      height: 100%;
      margin: 0px;
      padding: 0px;
      background: white;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      align-items: center;

    }
    video {
      display: block;
      {{!-- width: 100%;
      height: auto; --}}
      max-height: 100%;
      max-width: 100%;
      margin: auto;
    }

    button {
      all: unset;
      position: relative;
      height: 60px;
      width: 60px;
      background-color: #7D8CA3;
      border-radius: 50%;
      margin-bottom: 30px;
    }

    button::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      height: 80px;
      width: 80px;
      border-radius: 50%;
      border: #7D8CA3 4px solid;
    }

    .stop {
      height: 40px;
      width: 40px;
      background-color: red !important;
      border-radius: 10% !important; 
    }

    .stop::after {
      border: red 4px solid !important;
    }

  </style>
</head>
<body>

  <video muted></video>
  <button type="button"></button>
  <div id="parts-length">Parts Length: 0</div>

  <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
  <script>
    const videoUploadUrl = "{{ videoUploadUrl }}"
    const timeDistanceSec = 0.5
    const videoElement = document.querySelector('video')
    const button = document.querySelector('button')
    const partsLengthDiv = document.getElementById('parts-length');
    let counter = 0;
    let parts = new Map();
    let recievedParts = new Set();

    let isRecording = false
    let mediaRecorder
    let socket

    let isProcessing = false;

    function updatePartsLength() {
      partsLengthDiv.textContent = `Parts Length: ${parts.size}`;
    }

    async function setupMediaRecorder() {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          video: {
            facingMode: 'environment'
          },
          audio: true
        });
        videoElement.srcObject = stream;
        videoElement.play();

        mediaRecorder = new MediaRecorder(stream, {
          //here can set the video quality based on network quality
          videoBitsPerSecond: 400000,
          audioBitsPerSecond: 32000,
          videoFrameRate: 25,
        });
        mediaRecorder.ondataavailable = handleDataAvailable;
      } catch (error) {
        console.error('Error accessing media devices:', error);
      }
    }

    async function handleDataAvailable(event) {
      console.log('ondataavailable', event);
      event.data.arrayBuffer().then((buffer) => {
        updatePartsLength();
        parts.set(counter, buffer);
        counter++;
        if (!isProcessing) {
          uploadParts();
        }
      });
    }

    async function uploadParts(resume) {
      updatePartsLength();
      return new Promise((resolve, reject) => {
        isProcessing = true;
        if (parts.size > 0) {
          if (socket && socket.connected || resume) {
            {{!-- const [count, part] = [...parts.entries()][0]; --}}
            const count = [...parts.keys()].toSorted((a, b) => a - b)[0];
            const part = parts.get(count);
            if (!recievedParts.has(count)) {
              resume && recievedParts.add(count);
              socket.emit('videoPart', {count, part}, (response) => {
                if (response) {
                  recievedParts.add(count);
                  parts.delete(count);
                  uploadParts()
                    .then(() => resolve())
                } else {
                  reject(new Error('Error sending part'));
                }
              });
            }
          }
        } else {
          isProcessing = false;
          disconnectSocket();
          resolve();
        }
      })
    }

    function disconnectSocket() {
      if (socket && socket.connected && !isRecording && parts.size === 0) {
        socket.emit('endVideo');
        socket.disconnect();
      }
    }

    function connectToSocket() {
      if (!socket || !socket.connected) {
        socket = io(videoUploadUrl);
        socket.on('connect', () => {
          console.log('connected');
        });

        socket.on('disconnect', () => {
          console.log('disconnected');
        });

        socket.on('error', () => {
          console.log('disconnected');
          throw new Error('Socket connection error');
        });

        socket.io.on('reconnect', () => {
          console.log('reconnected');
          uploadParts(true);
        });
      }
    }

    button.addEventListener('click', () => {
      if (!isRecording) {
        counter = 0;
        isProcessing = false;
        recievedParts = new Set();
        parts.clear();
        console.log('started');
        connectToSocket();
        mediaRecorder.start(timeDistanceSec * 1000);
        button.classList.add('stop');
      } else {
        console.log('stopped');
        mediaRecorder.stop();
        button.classList.remove('stop');
      }
      isRecording = !isRecording;
    });

    setupMediaRecorder();
  </script>

</body>
</html>